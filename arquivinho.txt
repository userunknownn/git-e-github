#GIT e Github#

* Idéias sobre Git
  - [X] O que é o git :
    + Sistema de controle de versionamento distribuido, gratuito e open source
      - [X] O que é um sistema de controle de versionamento ?
        +
                 Um sistema de controle de versões é um software que gerencia diferentes
                 versões durante o desenvolvimento de um arquivo, e mantém um histórico de
                 cada mudança realizada no arquivo que são mantidos em um diretório do
                 servidor do sistema de controle de versões, desta forma os desenvolvedores
                 podem acessar e criar uma cópia local para trabalharem com o desenvolvimento
                 do mesmo.

                 Se de alguma maneira o arquivo for acessado e alterado por mais de
                 desenvolvedor ao mesmo tempo, o sistema de controle de versões tem
                 ferramentas para mesclar as alterações feitas tentando evitar qualquer
                 tipo de conflito, e em caso de conflito, fornece opções para contornar
                 este mesmo conflito.

                 Os sistemas de controle de versões são classificados em dois tipos:
          - [X] Centralizado:
            +
                    trabalha em apenas um servidor central, suas áreas de trabalho tem que
                    passar pelo servidor para poderem se comunicar. É uma ótima versão para
                    pequenos grupos de desenvolvedores de uma mesma rede local.

          - [X] Distribuídos:
            +
                    São para grandes grupos de desenvolvedores de diferentes filiais, onde
                    cada área de trabalho tem seu próprio servidor e permite que possa
                    comunicar-se entre si, é recomendado para evitar ramificações utilizar um
                    servidor como centro de envio dos arquivos para centralizar o fluxo.

    + O git foi projetado por Linus Torvalds em 2005 para o desenvolvimento do Linux,
      mas foi adotado por muitos outros projetos, pelo seu alto desempenho
      ao efetuar quase todas as operações na máquina local, o que é ainda mais
      rápido do que os sistemas de controle de versionamento centralizados.
      E além disso é escrito em C, o que já demonstra sua eficiência. Pois,
      diminui considerávelmente o tempo de execução comparado à outras linguagens
      de programação de alto nível.

    + A descrição no man de git é "the stupid content tracker", ou seja, o rastreiador
      de conteúdo estúpido. De acordo com o autor, git é um tipo de xingamento em
      inglês britânico para alguém irritante. E que dependendo de seu humor
      git poderia significar : "get" por erro de pronuncia; "stupid, despicable ..."
      relacionando-se ao xingamento britânico; "global information tracker" se ele
      estiver de bom humor e os anjos começarem a cantar, mas pode ser você feliz,
      e sinceramente tanto faz; "goddamn idiotic truckload" que segue a linha de
      xingamentos.

      Mas a relação de "the stupid content tracker", tem relação direta ao KISS,
      Keep It Simple Stupid, e o projeto em sí, começou bem simples, tão simples,
      que as primeiras versões eram inacessíveis. O objetivo pricipal do git, é
      manter as coisas bem "óbvias" e tentar não ser "esperto" demais, o que
      pode atrapalhar no seu uso, pois abstrações podem dar significados indesejados,
      para ações envolvendo o sistema de arquivos.

  - [-] Comandos básicos de git:
    - [X] Configuração:
      - [X] git:
        Uma vez instalado o git, pode ser chamado desta forma, trazendo com ele
        diversas possíbilidades de uso.
      - [X] config:
        Você pode pesquisar, selecionar, substituir e retirar a seleção, de opções
        do git através deste comando.
      - [X] help:
        Uma vez que se digite "git", na linha de comando ou terminal, a lista dos
        comandos git mais usados é mostrada, para mostrar todas as possibilidades,
        as "--all" ou "-a" podem ser usadas, existem também alguns guias sobre
        os comandos git que podem ser acessados por meio das flags "--guides" ou "-g",
        mas o ideal é que para informações detalhadas se use o comando "man", que
        está disponível em todas as distribuições Linux, por padrão.
      - [X] bugreport:
        Obtem informações sobre a máquina do usuário, o git instalado nela, o estado
        do repositório acessado, e requer um formulário que retrate a situação, de
        um problema. No caso, como reproduzir o erro, o comportamento esperado, e
        o que aconteceu.

    - [X] Obtenção e Criação:
      - [X] init:
        Cria um repositório git ou reinicializa um já existente, este comando cria
        todos os arquivo e templates necessários para que se utilize o versionamento
        git.
      - [X] clone:
        Clona um repositório em uma nova pasta, e cria um rastreiador remoto para
        cada branch neste repositório.

    - [X] Ações básicas:
      - [X] add:
        Este comando atualiza o indíce, utilizando o conteúdo atual para preparar,
        o conteúdo mapeado para o próximo commit.
      - [X] status:
        Mostra as diferenças entre o indíce que há armazenado, e o último commit,
        caminhos que não estão sendo mapeados pelo git, estão no arquivo gitignore.
      - [X] diff:
        Mostra diferenças.
      - [X] commit:
        Salva mudanças em um diretório, um novo commit contém os conteúdos atuais
        que estão no indíce.
      - [X] notes:
        Adiciona, remove, ou lê notas atreladas aos objetos, sem modificá-los.
      - [X] restore:
        Restaura caminhos especificos da árvore de trabalho, se um caminho não
        mapeado não estiver na fonte de restauração, será removido.
      - [X] reset:
        Remove alterações de commits do ramo atual, e pode ser especificado
        quantos serão removidos, ou seja, o quão longe eu vou resetar meu
        estado atual, as coisas que foram removidas, com essa ação vão para
        o estado "not staged"
      - [X] rm:
        Remove arquivos mapeados do indice do git.
      - [X] mv:
        Renomeia ou move arquivos, e coloca eles automáticamente em stagged, então
        só comitar já tráz a nova organização ao git, sem necessidade de git add

    - [X] Branching e Merging:
      - [X] branch:
        O comando branch, serve para gerenciar a criação, exclusão e os nomes dos ramos.
      - [X] checkout:
        Realiza a troca de contexto em branches, arquivos e commits.
      - [X] switch:
        Troca de branch, assim como checkout.
      - [X] merge:
        Junta conjuntos de commits, que podem ser de branches diferentes e os coloca
        no branch atual. O comando git pull, utiliza o merge para mesclar as mudanças
        que são necessárias para que o git local fique atualizado.
      - [X] mergetool:
        Contém diversas ferramentas para resolver conflitos de merge.
      - [X] log:
        Mostra o histórico dos commits e suas informações
      - [X] stash:
        Ele copia o que foi feito após o commit para uma região separada, e restaura
        o commit imediatamente anterior.
      - [X] tag:
        Marca pontos específicos no repositório, como importantes. Normalmente
        usado para marcar versões diferentes.
      - [X] worktree:
        O comando worktree, permite a criação de outras árvores de trabalho, e assim
        possibilitando trabalhar com diversas branches simultaneamente. Criando
        novos repositórios para o projeto e que cada um deles pode ter diversas branches,
        e assim como a árvore principal se trabalha um branch por vez.


    - [ ] Compartilhamento e Atualização:
      - [ ] fetch:
      - [ ] pull:
      - [ ] push:
      - [ ] remote:
      - [ ] submodule:

    - [X] Inspeção e Comparação:
      - [X] show:
        Mostra detalhes, sobre um ou mais objetos, no caso de árvores, mostra os nomes;
        No caso de tags, mostra a mensagem da tag e qual objeto esta referencia;
        No caso de commits, mostra a mensagem do log e a diferença;
      - [X] log:
        Mostra o histórico dos commits e suas informações
      - [X] diff:
        Mostra diferenças.
      - [X] difftool:
        É um comando que transfere a saída do comando diff, para um outro programa, para
        que seja mostrada, de acordo com a manipulação do programa.
      - [X] range-diff:
        Mostra diferenças sobre um conjunto de commits, versões empacotadas, ou
        de branches, que tem um ponto inicial em comum.
      - [X] shortlog:
        Mostra os autores dos commits, quais commits foram de cada autor.
      - [X] describe:
        Retorna um nome legível baseado numa referencia disponível. Encontra a tag
        mais recente, partindo de um commit. Mostra o número de commits sobre a
        referência especificada, e quais outros commits estão atrelados à ela. E no
        caso de uma tag referenciar um commit, ela retorna somente a tag é mostrada.

    - [-] Empacotamento:
      - [ ] apply:
      - [ ] cherry-pick:
      - [X] diff:
        Mostra diferenças.
      - [ ] rebase:
      - [ ] revert:

    - [ ] Depuração:
      - [ ] bisect:
      - [ ] blame:
      - [ ] grep:

